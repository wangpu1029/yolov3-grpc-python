# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: testrpc.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='testrpc.proto',
  package='testrpc',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n\rtestrpc.proto\x12\x07testrpc\"\x16\n\x07Request\x12\x0b\n\x03msg\x18\x01 \x01(\x0c\"\x14\n\x05Reply\x12\x0b\n\x03msg\x18\x01 \x01(\x0c\x32\xdd\x01\n\x07TestRPC\x12.\n\x08OneToOne\x12\x10.testrpc.Request\x1a\x0e.testrpc.Reply\"\x00\x12\x33\n\x0bOneToStream\x12\x10.testrpc.Request\x1a\x0e.testrpc.Reply\"\x00\x30\x01\x12\x33\n\x0bStreamToOne\x12\x10.testrpc.Request\x1a\x0e.testrpc.Reply\"\x00(\x01\x12\x38\n\x0eStreamToStream\x12\x10.testrpc.Request\x1a\x0e.testrpc.Reply\"\x00(\x01\x30\x01\x62\x06proto3')
)




_REQUEST = _descriptor.Descriptor(
  name='Request',
  full_name='testrpc.Request',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='msg', full_name='testrpc.Request.msg', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=26,
  serialized_end=48,
)


_REPLY = _descriptor.Descriptor(
  name='Reply',
  full_name='testrpc.Reply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='msg', full_name='testrpc.Reply.msg', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=50,
  serialized_end=70,
)

DESCRIPTOR.message_types_by_name['Request'] = _REQUEST
DESCRIPTOR.message_types_by_name['Reply'] = _REPLY
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Request = _reflection.GeneratedProtocolMessageType('Request', (_message.Message,), {
  'DESCRIPTOR' : _REQUEST,
  '__module__' : 'testrpc_pb2'
  # @@protoc_insertion_point(class_scope:testrpc.Request)
  })
_sym_db.RegisterMessage(Request)

Reply = _reflection.GeneratedProtocolMessageType('Reply', (_message.Message,), {
  'DESCRIPTOR' : _REPLY,
  '__module__' : 'testrpc_pb2'
  # @@protoc_insertion_point(class_scope:testrpc.Reply)
  })
_sym_db.RegisterMessage(Reply)



_TESTRPC = _descriptor.ServiceDescriptor(
  name='TestRPC',
  full_name='testrpc.TestRPC',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  serialized_start=73,
  serialized_end=294,
  methods=[
  _descriptor.MethodDescriptor(
    name='OneToOne',
    full_name='testrpc.TestRPC.OneToOne',
    index=0,
    containing_service=None,
    input_type=_REQUEST,
    output_type=_REPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='OneToStream',
    full_name='testrpc.TestRPC.OneToStream',
    index=1,
    containing_service=None,
    input_type=_REQUEST,
    output_type=_REPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='StreamToOne',
    full_name='testrpc.TestRPC.StreamToOne',
    index=2,
    containing_service=None,
    input_type=_REQUEST,
    output_type=_REPLY,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='StreamToStream',
    full_name='testrpc.TestRPC.StreamToStream',
    index=3,
    containing_service=None,
    input_type=_REQUEST,
    output_type=_REPLY,
    serialized_options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_TESTRPC)

DESCRIPTOR.services_by_name['TestRPC'] = _TESTRPC

# @@protoc_insertion_point(module_scope)
