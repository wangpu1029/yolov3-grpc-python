# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import testrpc_pb2 as testrpc__pb2


class TestRPCStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.OneToOne = channel.unary_unary(
        '/testrpc.TestRPC/OneToOne',
        request_serializer=testrpc__pb2.Request.SerializeToString,
        response_deserializer=testrpc__pb2.Reply.FromString,
        )
    self.OneToStream = channel.unary_stream(
        '/testrpc.TestRPC/OneToStream',
        request_serializer=testrpc__pb2.Request.SerializeToString,
        response_deserializer=testrpc__pb2.Reply.FromString,
        )
    self.StreamToOne = channel.stream_unary(
        '/testrpc.TestRPC/StreamToOne',
        request_serializer=testrpc__pb2.Request.SerializeToString,
        response_deserializer=testrpc__pb2.Reply.FromString,
        )
    self.StreamToStream = channel.stream_stream(
        '/testrpc.TestRPC/StreamToStream',
        request_serializer=testrpc__pb2.Request.SerializeToString,
        response_deserializer=testrpc__pb2.Reply.FromString,
        )


class TestRPCServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def OneToOne(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def OneToStream(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamToOne(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamToStream(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TestRPCServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'OneToOne': grpc.unary_unary_rpc_method_handler(
          servicer.OneToOne,
          request_deserializer=testrpc__pb2.Request.FromString,
          response_serializer=testrpc__pb2.Reply.SerializeToString,
      ),
      'OneToStream': grpc.unary_stream_rpc_method_handler(
          servicer.OneToStream,
          request_deserializer=testrpc__pb2.Request.FromString,
          response_serializer=testrpc__pb2.Reply.SerializeToString,
      ),
      'StreamToOne': grpc.stream_unary_rpc_method_handler(
          servicer.StreamToOne,
          request_deserializer=testrpc__pb2.Request.FromString,
          response_serializer=testrpc__pb2.Reply.SerializeToString,
      ),
      'StreamToStream': grpc.stream_stream_rpc_method_handler(
          servicer.StreamToStream,
          request_deserializer=testrpc__pb2.Request.FromString,
          response_serializer=testrpc__pb2.Reply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'testrpc.TestRPC', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
